// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Software_Engineering_Assingment.Migrations
{
    [DbContext(typeof(DBContext))]
    partial class DBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("Software_Engineering_Assingment.Models.AwarenessFireExits", b =>
                {
                    b.Property<int>("AwarenessFireExitsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActionTaken")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Completed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Interventions")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReportId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AwarenessFireExitsId");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("AwarenessFireExits");
                });

            modelBuilder.Entity("Software_Engineering_Assingment.Models.COSHH", b =>
                {
                    b.Property<int>("COSHHId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActionTaken")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Completed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Interventions")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReportId")
                        .HasColumnType("INTEGER");

                    b.HasKey("COSHHId");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("COSHH");
                });

            modelBuilder.Entity("Software_Engineering_Assingment.Models.CertificationDailyChecksheets", b =>
                {
                    b.Property<int>("CertificationDailyChecksheetsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActionTaken")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Completed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Interventions")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReportId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CertificationDailyChecksheetsId");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("CertificationDailyChecksheets");
                });

            modelBuilder.Entity("Software_Engineering_Assingment.Models.CertificationTrainingInsurance", b =>
                {
                    b.Property<int>("CertificationTrainingInsuranceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActionTaken")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Completed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Interventions")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReportId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CertificationTrainingInsuranceId");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("CertificationTrainingInsurance");
                });

            modelBuilder.Entity("Software_Engineering_Assingment.Models.ConfinedSpaceWork", b =>
                {
                    b.Property<int>("ConfinedSpaceWorkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActionTaken")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Completed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Interventions")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReportId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ConfinedSpaceWorkId");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("ConfinedSpaceWork");
                });

            modelBuilder.Entity("Software_Engineering_Assingment.Models.ElectricalWork", b =>
                {
                    b.Property<int>("ElectricalWorkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActionTaken")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Completed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Interventions")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReportId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ElectricalWorkId");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("ElectricalWork");
                });

            modelBuilder.Entity("Software_Engineering_Assingment.Models.FireExits", b =>
                {
                    b.Property<int>("FireExitsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActionTaken")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Completed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Interventions")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReportId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FireExitsId");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("FireExits");
                });

            modelBuilder.Entity("Software_Engineering_Assingment.Models.HotWork", b =>
                {
                    b.Property<int>("HotWorkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActionTaken")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Completed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Interventions")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReportId")
                        .HasColumnType("INTEGER");

                    b.HasKey("HotWorkId");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("HotWork");
                });

            modelBuilder.Entity("Software_Engineering_Assingment.Models.Isolation", b =>
                {
                    b.Property<int>("IsolationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActionTaken")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Completed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Interventions")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReportId")
                        .HasColumnType("INTEGER");

                    b.HasKey("IsolationId");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("Isolation");
                });

            modelBuilder.Entity("Software_Engineering_Assingment.Models.LiftingOperations", b =>
                {
                    b.Property<int>("LiftingOperationsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActionTaken")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Completed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Interventions")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReportId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LiftingOperationsId");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("LiftingOperations");
                });

            modelBuilder.Entity("Software_Engineering_Assingment.Models.ManualHandling", b =>
                {
                    b.Property<int>("ManualHandlingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActionTaken")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Completed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Interventions")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReportId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ManualHandlingId");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("ManualHandling");
                });

            modelBuilder.Entity("Software_Engineering_Assingment.Models.OtherContractors", b =>
                {
                    b.Property<int>("OtherContractorsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActionTaken")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Completed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Interventions")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReportId")
                        .HasColumnType("INTEGER");

                    b.HasKey("OtherContractorsId");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("OtherContractors");
                });

            modelBuilder.Entity("Software_Engineering_Assingment.Models.PPE", b =>
                {
                    b.Property<int>("PPEId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActionTaken")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Completed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Interventions")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReportId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PPEId");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("PPE");
                });

            modelBuilder.Entity("Software_Engineering_Assingment.Models.Paperwork", b =>
                {
                    b.Property<int>("PaperworkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActionTaken")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Completed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Interventions")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReportId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PaperworkId");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("Paperwork");
                });

            modelBuilder.Entity("Software_Engineering_Assingment.Models.PowerTools", b =>
                {
                    b.Property<int>("PowerToolsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActionTaken")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Completed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Interventions")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReportId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PowerToolsId");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("PowerTools");
                });

            modelBuilder.Entity("Software_Engineering_Assingment.Models.ProductContamination", b =>
                {
                    b.Property<int>("ProductContaminationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActionTaken")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Completed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Interventions")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReportId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProductContaminationId");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("ProductContamination");
                });

            modelBuilder.Entity("Software_Engineering_Assingment.Models.Report", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("InspectorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("JobDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SiteId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Supervisor")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("WorkArea")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ReportId");

                    b.HasIndex("SiteId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Report");
                });

            modelBuilder.Entity("Software_Engineering_Assingment.Models.Site", b =>
                {
                    b.Property<int>("SiteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("SiteId");

                    b.ToTable("Site");
                });

            modelBuilder.Entity("Software_Engineering_Assingment.Models.SiteSetUpAppearance", b =>
                {
                    b.Property<int>("SiteSetUpAppearanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActionTaken")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Completed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Interventions")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReportId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SiteSetUpAppearanceId");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("SiteSetUpAppearance");
                });

            modelBuilder.Entity("Software_Engineering_Assingment.Models.ToolsUsedFitForPurpose", b =>
                {
                    b.Property<int>("ToolsUsedFitForPurposeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActionTaken")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Completed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Interventions")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReportId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ToolsUsedFitForPurposeId");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("ToolsUsedFitForPurpose");
                });

            modelBuilder.Entity("Software_Engineering_Assingment.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Software_Engineering_Assingment.Models.VehicleCondition", b =>
                {
                    b.Property<int>("VehicleConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActionTaken")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Completed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Interventions")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReportId")
                        .HasColumnType("INTEGER");

                    b.HasKey("VehicleConditionId");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("VehicleCondition");
                });

            modelBuilder.Entity("Software_Engineering_Assingment.Models.VehicleLogSheetUpToDate", b =>
                {
                    b.Property<int>("VehicleLogSheetUpToDateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActionTaken")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Completed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Interventions")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReportId")
                        .HasColumnType("INTEGER");

                    b.HasKey("VehicleLogSheetUpToDateId");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("VehicleLogSheetUpToDate");
                });

            modelBuilder.Entity("Software_Engineering_Assingment.Models.VehicleServiceRecords", b =>
                {
                    b.Property<int>("VehicleServiceRecordsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActionTaken")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Completed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Interventions")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReportId")
                        .HasColumnType("INTEGER");

                    b.HasKey("VehicleServiceRecordsId");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("VehicleServiceRecords");
                });

            modelBuilder.Entity("Software_Engineering_Assingment.Models.VoltageDetectorChecked", b =>
                {
                    b.Property<int>("VoltageDetectorCheckedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActionTaken")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Completed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Interventions")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReportId")
                        .HasColumnType("INTEGER");

                    b.HasKey("VoltageDetectorCheckedId");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("VoltageDetectorChecked");
                });

            modelBuilder.Entity("Software_Engineering_Assingment.Models.WasteManagement", b =>
                {
                    b.Property<int>("WasteManagementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActionTaken")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Completed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Interventions")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReportId")
                        .HasColumnType("INTEGER");

                    b.HasKey("WasteManagementId");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("WasteManagement");
                });

            modelBuilder.Entity("Software_Engineering_Assingment.Models.WorkAtHeight", b =>
                {
                    b.Property<int>("WorkAtHeightsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActionTaken")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Completed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Interventions")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReportId")
                        .HasColumnType("INTEGER");

                    b.HasKey("WorkAtHeightsId");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("WorkAtHeight");
                });

            modelBuilder.Entity("Software_Engineering_Assingment.Models.AwarenessFireExits", b =>
                {
                    b.HasOne("Software_Engineering_Assingment.Models.Report", "Report")
                        .WithOne("AwarenessFireExits")
                        .HasForeignKey("Software_Engineering_Assingment.Models.AwarenessFireExits", "ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("Software_Engineering_Assingment.Models.COSHH", b =>
                {
                    b.HasOne("Software_Engineering_Assingment.Models.Report", "Report")
                        .WithOne("COSHH")
                        .HasForeignKey("Software_Engineering_Assingment.Models.COSHH", "ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("Software_Engineering_Assingment.Models.CertificationDailyChecksheets", b =>
                {
                    b.HasOne("Software_Engineering_Assingment.Models.Report", "Report")
                        .WithOne("CertificationDailyChecksheets")
                        .HasForeignKey("Software_Engineering_Assingment.Models.CertificationDailyChecksheets", "ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("Software_Engineering_Assingment.Models.CertificationTrainingInsurance", b =>
                {
                    b.HasOne("Software_Engineering_Assingment.Models.Report", "Report")
                        .WithOne("CertificationTrainingInsurance")
                        .HasForeignKey("Software_Engineering_Assingment.Models.CertificationTrainingInsurance", "ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("Software_Engineering_Assingment.Models.ConfinedSpaceWork", b =>
                {
                    b.HasOne("Software_Engineering_Assingment.Models.Report", "Report")
                        .WithOne("ConfinedSpaceWork")
                        .HasForeignKey("Software_Engineering_Assingment.Models.ConfinedSpaceWork", "ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("Software_Engineering_Assingment.Models.ElectricalWork", b =>
                {
                    b.HasOne("Software_Engineering_Assingment.Models.Report", "Report")
                        .WithOne("ElectricalWork")
                        .HasForeignKey("Software_Engineering_Assingment.Models.ElectricalWork", "ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("Software_Engineering_Assingment.Models.FireExits", b =>
                {
                    b.HasOne("Software_Engineering_Assingment.Models.Report", "Report")
                        .WithOne("FireExits")
                        .HasForeignKey("Software_Engineering_Assingment.Models.FireExits", "ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("Software_Engineering_Assingment.Models.HotWork", b =>
                {
                    b.HasOne("Software_Engineering_Assingment.Models.Report", "Report")
                        .WithOne("HotWork")
                        .HasForeignKey("Software_Engineering_Assingment.Models.HotWork", "ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("Software_Engineering_Assingment.Models.Isolation", b =>
                {
                    b.HasOne("Software_Engineering_Assingment.Models.Report", "Report")
                        .WithOne("Isolation")
                        .HasForeignKey("Software_Engineering_Assingment.Models.Isolation", "ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("Software_Engineering_Assingment.Models.LiftingOperations", b =>
                {
                    b.HasOne("Software_Engineering_Assingment.Models.Report", "Report")
                        .WithOne("LiftingOperations")
                        .HasForeignKey("Software_Engineering_Assingment.Models.LiftingOperations", "ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("Software_Engineering_Assingment.Models.ManualHandling", b =>
                {
                    b.HasOne("Software_Engineering_Assingment.Models.Report", "Report")
                        .WithOne("ManualHandling")
                        .HasForeignKey("Software_Engineering_Assingment.Models.ManualHandling", "ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("Software_Engineering_Assingment.Models.OtherContractors", b =>
                {
                    b.HasOne("Software_Engineering_Assingment.Models.Report", "Report")
                        .WithOne("OtherContractors")
                        .HasForeignKey("Software_Engineering_Assingment.Models.OtherContractors", "ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("Software_Engineering_Assingment.Models.PPE", b =>
                {
                    b.HasOne("Software_Engineering_Assingment.Models.Report", "Report")
                        .WithOne("PPE")
                        .HasForeignKey("Software_Engineering_Assingment.Models.PPE", "ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("Software_Engineering_Assingment.Models.Paperwork", b =>
                {
                    b.HasOne("Software_Engineering_Assingment.Models.Report", "Report")
                        .WithOne("Paperwork")
                        .HasForeignKey("Software_Engineering_Assingment.Models.Paperwork", "ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("Software_Engineering_Assingment.Models.PowerTools", b =>
                {
                    b.HasOne("Software_Engineering_Assingment.Models.Report", "Report")
                        .WithOne("PowerTools")
                        .HasForeignKey("Software_Engineering_Assingment.Models.PowerTools", "ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("Software_Engineering_Assingment.Models.ProductContamination", b =>
                {
                    b.HasOne("Software_Engineering_Assingment.Models.Report", "Report")
                        .WithOne("ProductContamination")
                        .HasForeignKey("Software_Engineering_Assingment.Models.ProductContamination", "ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("Software_Engineering_Assingment.Models.Report", b =>
                {
                    b.HasOne("Software_Engineering_Assingment.Models.Site", "Site")
                        .WithOne("Report")
                        .HasForeignKey("Software_Engineering_Assingment.Models.Report", "SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Software_Engineering_Assingment.Models.User", "User")
                        .WithOne("Report")
                        .HasForeignKey("Software_Engineering_Assingment.Models.Report", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Site");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Software_Engineering_Assingment.Models.SiteSetUpAppearance", b =>
                {
                    b.HasOne("Software_Engineering_Assingment.Models.Report", "Report")
                        .WithOne("SiteSetUpAppearance")
                        .HasForeignKey("Software_Engineering_Assingment.Models.SiteSetUpAppearance", "ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("Software_Engineering_Assingment.Models.ToolsUsedFitForPurpose", b =>
                {
                    b.HasOne("Software_Engineering_Assingment.Models.Report", "Report")
                        .WithOne("ToolsUsedFitForPurpose")
                        .HasForeignKey("Software_Engineering_Assingment.Models.ToolsUsedFitForPurpose", "ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("Software_Engineering_Assingment.Models.VehicleCondition", b =>
                {
                    b.HasOne("Software_Engineering_Assingment.Models.Report", "Report")
                        .WithOne("VehicleCondition")
                        .HasForeignKey("Software_Engineering_Assingment.Models.VehicleCondition", "ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("Software_Engineering_Assingment.Models.VehicleLogSheetUpToDate", b =>
                {
                    b.HasOne("Software_Engineering_Assingment.Models.Report", "Report")
                        .WithOne("VehicleLogSheetUpToDate")
                        .HasForeignKey("Software_Engineering_Assingment.Models.VehicleLogSheetUpToDate", "ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("Software_Engineering_Assingment.Models.VehicleServiceRecords", b =>
                {
                    b.HasOne("Software_Engineering_Assingment.Models.Report", "Report")
                        .WithOne("VehicleServiceRecords")
                        .HasForeignKey("Software_Engineering_Assingment.Models.VehicleServiceRecords", "ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("Software_Engineering_Assingment.Models.VoltageDetectorChecked", b =>
                {
                    b.HasOne("Software_Engineering_Assingment.Models.Report", "Report")
                        .WithOne("VoltageDetectorChecked")
                        .HasForeignKey("Software_Engineering_Assingment.Models.VoltageDetectorChecked", "ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("Software_Engineering_Assingment.Models.WasteManagement", b =>
                {
                    b.HasOne("Software_Engineering_Assingment.Models.Report", "Report")
                        .WithOne("WasteManagement")
                        .HasForeignKey("Software_Engineering_Assingment.Models.WasteManagement", "ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("Software_Engineering_Assingment.Models.WorkAtHeight", b =>
                {
                    b.HasOne("Software_Engineering_Assingment.Models.Report", "Report")
                        .WithOne("WorkAtHeight")
                        .HasForeignKey("Software_Engineering_Assingment.Models.WorkAtHeight", "ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("Software_Engineering_Assingment.Models.Report", b =>
                {
                    b.Navigation("AwarenessFireExits");

                    b.Navigation("CertificationDailyChecksheets");

                    b.Navigation("CertificationTrainingInsurance");

                    b.Navigation("ConfinedSpaceWork");

                    b.Navigation("COSHH");

                    b.Navigation("ElectricalWork");

                    b.Navigation("FireExits");

                    b.Navigation("HotWork");

                    b.Navigation("Isolation");

                    b.Navigation("LiftingOperations");

                    b.Navigation("ManualHandling");

                    b.Navigation("OtherContractors");

                    b.Navigation("Paperwork");

                    b.Navigation("PowerTools");

                    b.Navigation("PPE");

                    b.Navigation("ProductContamination");

                    b.Navigation("SiteSetUpAppearance");

                    b.Navigation("ToolsUsedFitForPurpose");

                    b.Navigation("VehicleCondition");

                    b.Navigation("VehicleLogSheetUpToDate");

                    b.Navigation("VehicleServiceRecords");

                    b.Navigation("VoltageDetectorChecked");

                    b.Navigation("WasteManagement");

                    b.Navigation("WorkAtHeight");
                });

            modelBuilder.Entity("Software_Engineering_Assingment.Models.Site", b =>
                {
                    b.Navigation("Report");
                });

            modelBuilder.Entity("Software_Engineering_Assingment.Models.User", b =>
                {
                    b.Navigation("Report");
                });
#pragma warning restore 612, 618
        }
    }
}
